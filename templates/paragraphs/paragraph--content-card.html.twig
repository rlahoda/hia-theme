{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% if paragraph.field_card_style.target_id == 23 %}
  {% set cardStyle = 'uk-card-primary' %}
{% elseif paragraph.field_card_style.target_id == 24 %}
  {% set cardStyle = 'uk-card-secondary' %}
{% else %}
  {% set cardStyle = 'uk-card-default' %}
{% endif %}

{% if paragraph.field_button_style.target_id == 23 %}
  {% set buttonStyle = 'uk-button-primary' %}
{% elseif paragraph.field_button_style.target_id == 24 %}
  {% set buttonStyle = 'uk-button-secondary' %}
{% else %}
  {% set buttonStyle = 'uk-button-default' %}
{% endif %}

{% if paragraph.field_padding.target_id == 21 %}
  {% set padding = 'uk-card-small' %}
{% elseif paragraph.field_padding.target_id == 20 %}
  {% set padding = 'uk-card-large' %}
{% else %}
  {% set padding = 'uk-padding' %}
{% endif %}


{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    'uk-card',
    padding,
    'uk-card-body',
    cardStyle,
    'uk-box-shadow-hover-xlarge',
  ]
%}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
  {% block content %}
  {% if content.field_heading['#items'] is not empty %}
    <h3 class="uk-card-title">{{ content.field_heading }}</h3>
    {% endif %}
      {{ content|without('field_heading', 'field_card_style', 'field_padding', 'field_button_style', 'field_button_dest', 'field_button_text') }}
      {% if content.field_button_text['#items'] is not empty %}
      <p style="text-align: center;">
       <a class="uk-button {{ buttonStyle }}" href="{{ content.field_button_dest[0]['#url'] }}" role="button">{{ content.field_button_text }}</a>
     </p>
     {% endif %}
    {% endblock %}
  </div>
{% endblock paragraph %}
